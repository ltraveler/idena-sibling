---
- name: Idena Node and Idena Proxy Management
  hosts: main
  become: yes

  handlers:
    - name: IdenaNodeRestart
      ansible.builtin.service:
        name: idena_{{ username }}
        state: restarted

    - name: idena-proxy-restart
      ansible.builtin.shell: pm2 restart idena-node-proxy
      args:
        executable: /bin/bash
        chdir: /home/{{ username }}/idena-node-proxy
      become: true
      become_user: "{{ username }}"

  tasks:
    - name: Check if idena node daemon is run
      ansible.builtin.service_facts:
      tags: always

    - name: Check if idena go is installed
      ansible.builtin.stat:
        path: /home/{{ username }}/idena-go/config.json
      register: idenanode
      tags: always

    - name: Check if idena-node-proxy is installed
      ansible.builtin.stat:
        path: /home/{{ username }}/idena-node-proxy/config.json
      register: idenaproxy
      tags: always

    # Mining Management: ON/OFF
    - name: Mining ON
      block:
        - name: dna_becomeOnline
          ansible.builtin.uri:
            url: http://{{ httphost }}:{{ httpport }}
            method: POST
            headers:
              Content-Type: application/json
            body_format: json
            body:
              jsonrpc: "2.0"
              key: "{{ vault_api_key }}"
              id: 1
              method: "dna_becomeOnline"
              params:
                - {}
            return_content: yes
          register: responseMiningOn

        - name: stdout of dna_becomeOnline to variable
          debug:
            var: responseMiningOn.content

      tags: [never, IdenaMiningOn]
      when: ansible_facts.services["idena_" + username + ".service"].state == 'running'

    - name: Mining OFF
      block:
        - name: dna_becomeOffline
          ansible.builtin.uri:
            url: http://{{ httphost }}:{{ httpport }}
            method: POST
            headers:
              Content-Type: application/json
            body_format: json
            body:
              jsonrpc: "2.0"
              key: "{{ vault_api_key }}"
              id: 1
              method: "dna_becomeOffline"
              params:
                - {}
            return_content: yes
          register: responseMiningOff

        - name: stdout of dna_becomeOffline to variable
          debug:
            var: responseMiningOff.content

      tags: [never, IdenaMiningOff]
      when: ansible_facts.services["idena_" + username + ".service"].state == 'running'

    # Node Management: ON/OFF
    - name: Start Idena Daemon
      block:
        - name: Service idena_{{ username }} start
          ansible.builtin.service:
            name: idena_{{ username }}
            state: started
          register: responseNodeStart

        - name: stdout of responseNodeStart to variable
          debug:
            var: responseNodeStart.state

      tags: [never, IdenaNodeStart]
      when: ansible_facts.services["idena_" + username + ".service"].state == 'stopped'

    - name: Stop Idena Daemon
      block:
        - name: Service idena_{{ username }} stop
          ansible.builtin.service:
            name: idena_{{ username }}
            state: stopped
          register: responseNodeStop

        - name: stdout of responseNodeStop to variable
          debug:
            var: responseNodeStop.state

      tags: [never, IdenaNodeStop]
      when: ansible_facts.services["idena_" + username + ".service"].state == 'running'

    # Private/API Keys Management
    - name: Nodekey Update
      block:
        - name: Overwrite new value into the nodekey file
          ansible.builtin.copy:
            content: "{{ vault_node_key }}"
            dest: "/home/{{ username }}/idena-go/datadir/keystore/nodekey"
            owner: "{{ username }}"
            group: "{{ idena_group }}"
          notify: IdenaNodeRestart

      tags: [never, IdenaNodekeyUpdate]

    # Update API keys
    - name: Update node API keys
      block:
        - name: Checking if Idena proxy exists
          ansible.builtin.stat: path=/home/{{ username }}/idena-node-proxy/config.json
          register: idenaproxy_mgmt_status

        - name: Stop execution if config file is missing
          ansible.builtin.fail:
            msg: "Idena node proxy config.json file does not exists."
          when: not idenaproxy_mgmt_status.stat.exists

        - name: Read JSON file
          ansible.builtin.slurp:
            src: /home/{{ username }}/idena-node-proxy/config.json
          register: idena_config_json

        - name: Parse JSON data
          ansible.builtin.set_fact:
            idena_config_json_data: "{{ idena_config_json.content | b64decode | from_json }}"

        - name: Add new data to apiKeys array
          ansible.builtin.set_fact:
            idena_config_json_data: "{{ idena_config_json_data | combine({'apiKeys': idena_config_json_data.apiKeys + api_keys_add}) }}"

        - name: Remove data from apiKeys array
          ansible.builtin.set_fact:
            idena_config_json_data: "{{ idena_config_json_data | combine({'apiKeys': idena_config_json_data.apiKeys | difference(api_keys_remove)}) }}"

        - name: Remove duplicates from apiKeys array
          ansible.builtin.set_fact:
            idena_config_json_data: "{{ idena_config_json_data | combine({'apiKeys': idena_config_json_data.apiKeys | unique}) }}"

        - name: Save updated JSON file
          ansible.builtin.copy:
            content: "{{ idena_config_json_data | to_nice_json }}"
            dest: /home/{{ username }}/idena-node-proxy/config.json
          notify: idena-proxy-restart

        - name: Overwrite variable in local file
          become: no
          ansible.builtin.template:
            src: ./node/apikeys.j2
            dest: "{{ api_keys_path }}"
          delegate_to: localhost

      become: yes
      become_user: "{{ username }}"
      tags: [never, IdenaApiKeysUpdate]
      when: idenanode.stat.exists and idenaproxy.stat.exists
