---
- name: Installing requiered packages
  hosts: main
  become: true
  tasks:
    - name: Updating apt repo and cache
      ansible.builtin.apt: update_cache=yes upgrade=dist cache_valid_time=300

    - name: Checking if reboot is required
      stat:
        path: /var/run/reboot-required
      register: reboot_required_file

    - name: Rebooting a server if required
      reboot:
      when: reboot_required_file.stat.exists == true

    - name: Install IDENA requiered packages
      ansible.builtin.apt:
        pkg:
          - jq
          - git
          - ufw
          - curl
          - wget
          - nano
          - screen
          - psmisc
          - unzip
          - netcat-traditional
          - python3-pip

    - name: Pexpect is required
      ansible.builtin.pip:
        name: pexpect
      become: yes

- hosts: main
  roles:
    - role: disable_ssh_password
      sshd_PasswordAuthentication: "no"
  become: yes

- name: Some security preparations
  hosts: main
  become: true
  tasks:
    - name: Deploy root SSH key
      ansible.posix.authorized_key:
        user: root
        state: present
        exclusive: true
        key: "{{ lookup('file', '{{ public_key_file }}') }}"

- name: Adding a new user and creating its home directory
  hosts: main
  become: true
  tasks:
    - name: Getting a list of user groups
      getent:
        database: group

    - name: Create Idena node users' group
      group:
        name: "{{ idena_group }}"
        state: present
      when: idena_group not in ansible_facts.getent_group

    - name: Create Idena user
      ansible.builtin.user:
        name: "{{ username }}"
        state: present
        shell: /bin/bash
        password: "{{ userpass | password_hash('sha512') }}"
        update_password: on_create
        groups: "{{ idena_group }}"
        append: yes

    - name: Deploy SSH Public Key
      ansible.posix.authorized_key:
        user: "{{ username }}"
        state: present
        exclusive: true
        key: "{{ lookup('file', '{{ public_key_file }}') }}"

- name: User home folder preparation
  hosts: main
  become: true
  tasks:
    - name: Checking if Idena already exists
      ansible.builtin.stat: path=/home/{{ username }}/idena-go
      register: idenago_status

    - name: Create idena-go, datadir and keystore folder
      ansible.builtin.file:
        path: /home/{{ username }}/idena-go/datadir/keystore
        state: directory
        mode: "0755"
        recurse: true
        owner: "{{ username }}"
        group: "{{ idena_group }}"
      when: idenago_status.stat.exists == false

    - name: Download latest idena-go build
      ansible.builtin.get_url:
        url: https://github.com/idena-network/idena-go/releases/download/v{{ idena_go_ver }}/idena-node-linux-{{ idena_go_ver }}
        dest: /home/{{ username }}/idena-go/idena-node
        mode: "0755"
        owner: "{{ username }}"
        group: "{{ idena_group }}"
      when: idenago_status.stat.exists == false

    - name: Changing perm of "idena-go", adding "+x"
      ansible.builtin.file:
        dest: /home/{{ username }}/idena-go/idena-node
        mode: a+x
        owner: "{{ username }}"
        group: "{{ idena_group }}"
      when: idenago_status.stat.exists == false

    - name: Unpack latest IDENA blockchain snapshot
      ansible.builtin.git:
        repo: https://github.com/ltraveler/idenachain.db.git
        dest: /home/{{ username }}/idena-go/datadir/idenachain.db
        single_branch: yes
        version: main
        update: yes
      become: yes
      become_user: "{{ username }}"
      when: idenago_status.stat.exists == false

    - name: Template config.json to idena-go
      ansible.builtin.template:
        src: ./node/config.j2
        dest: /home/{{ username }}/idena-go/config.json
        owner: "{{ username }}"
        group: "{{ idena_group }}"
        mode: "0664"

    - name: Copying api.key
      ansible.builtin.template:
        src: ./node/api.j2
        dest: /home/{{ username }}/idena-go/datadir/api.key
        owner: "{{ username }}"
        group: "{{ idena_group }}"
        mode: "0664"

    - name: Copying nodekey
      ansible.builtin.template:
        src: ./node/nodekey.j2
        dest: /home/{{ username }}/idena-go/datadir/keystore/nodekey
        owner: "{{ username }}"
        group: "{{ idena_group }}"
        mode: "0664"

- name: Creating Idena daemon
  hosts: main
  become: true
  tasks:
    - name: Checking if service exists
      ansible.builtin.stat: path=/etc/systemd/system/idena_{{ username }}.service
      register: service_status

    - name: Print a debug message
      ansible.builtin.debug:
        msg: "Idena service doesn't exist"
      when: service_status.stat.exists == false

    - name: Copy idena.service
      ansible.builtin.template:
        src: ./node/idena_service.j2
        dest: /etc/systemd/system/idena_{{ username }}.service
        owner: root
        group: root
        mode: 0644
      when: service_status.stat.exists == false
      notify: daemon-reload

  handlers:
    - name: Enable idena daemon
      ansible.builtin.service:
        name: idena_{{ username }}
        state: enabled

    - name: daemon-reload
      ansible.builtin.service:
        name: idena_{{ username }}
        state: started

- name: Setting UFW rules
  hosts: main
  become: true
  tasks:
    - name: UFW +SSH connections
      community.general.ufw:
        rule: limit
        name: OpenSSH

    - name: UFW +IPFS port
      community.general.ufw:
        rule: allow
        port: "{{ ipfsport }}"

    - name: UFW +HTTPS port
      community.general.ufw:
        rule: allow
        port: "{{ httpsport }}"

    - name: UFW enabled, deny all apart from allowed
      community.general.ufw:
        state: enabled
        default: deny

- name: Increasing some system limits
  hosts: main
  become: true
  tasks:
    - name: Add or modify nofile hard and soft limits for the idena user
      community.general.pam_limits:
        domain: "{{ username }}"
        limit_type: "-"
        limit_item: nofile
        value: "{{ pam_limits_nofile }}"

    - name: changing system.conf fs.file-max
      ansible.posix.sysctl:
        name: fs.file-max
        value: "{{ fs_filemax }}"
        state: present

    - name: systemd system.conf nofile, nproc modification
      become: true
      ansible.builtin.lineinfile:
        dest: /etc/systemd/system.conf
        regexp: '^\s*#*\s*({{ item.param }})'
        line: '\1={{ item.value }}'
        backrefs: yes
        state: present
      with_items:
        - { param: "DefaultLimitNOFILE", value: "{{ limit_nofile_hard }}" }
        - { param: "DefaultLimitNPROC", value: "{{ limit_nproc_hard }}" }
      notify: daemon-reexec

  handlers:
    - name: daemon-reexec
      ansible.builtin.systemd:
        daemon_reexec: true

- name: Installing nodejs
  hosts: main
  become: true
  tags: nodejs_inst
  tasks:
    - name: "Adding nodejs nodesource apt key"
      ansible.builtin.apt_key:
        url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
        state: present

    - name: "nodejs ppa for apt"
      ansible.builtin.apt_repository:
        repo: deb https://deb.nodesource.com/node_{{ nodejs_version }} {{ ansible_facts.distribution_release }} main
        update_cache: yes

    - name: "Installing nodejs"
      ansible.builtin.apt:
        update_cache: yes
        name: nodejs
        state: present

    - name: pm2 to pm2_check
      ansible.builtin.command: pm2
      ignore_errors: true
      register: pm2_check

    - name: npm version to npm_ver
      ansible.builtin.command: npm -v
      register: npm_ver

    - name: Install specific npm version
      ansible.builtin.command: npm install -g npm@{{ npm_version }}
      when: npm_ver.stdout is version(npm_version, '!=')

    - name: Install pm2 if not installed
      ansible.builtin.command: npm i -g pm2
      when: pm2_check.rc == 2

- name: Installing idena-node-proxy
  hosts: main
  become: true
  tags: idenaproxy_inst
  tasks:
    - name: Checking if Idena proxy exists
      ansible.builtin.stat: path=/home/{{ username }}/idena-node-proxy
      register: idenaproxy_status

    - name: Creating idena-node-proxy folder
      ansible.builtin.file:
        path: /home/{{ username }}/idena-node-proxy
        state: directory
        mode: "0755"
        recurse: true
        owner: "{{ username }}"
        group: "{{ idena_group }}"
      when: idenaproxy_status.stat.exists == false

    - name: "Cloning idena-node-proxy"
      ansible.builtin.git:
        repo: https://github.com/idena-network/idena-node-proxy.git
        dest: /home/{{ username }}/idena-node-proxy
        single_branch: yes
        version: master
        update: yes
      become: yes
      become_user: "{{ username }}"
      when: idenaproxy_status.stat.exists == false

    - name: idena-node-proxy preparation
      ansible.builtin.shell: |
        sed -i 's/app.listen(parseInt(config.port));/app.listen(parseInt(config.port), '"'"'localhost'"'"');/g' index.js
      args:
        executable: /bin/bash
        chdir: /home/{{ username }}/idena-node-proxy
      when: idenaproxy_status.stat.exists == false

    - name: Fetching default config.json
      ansible.builtin.slurp:
        src: /home/{{ username }}/idena-node-proxy/config_default.json
      register: proxy_config
      when: idenaproxy_status.stat.exists == false

    - name: config.json b64 > json
      ansible.builtin.set_fact:
        idenaproxy_config: "{{ proxy_config.content | b64decode | from_json }}"
      when: idenaproxy_status.stat.exists == false

    - name: Preparing config.json
      ansible.utils.update_fact:
        updates:
          - path: idenaproxy_config.node.key
            value: "{{ vault_api_key }}"
          - path: idenaproxy_config.node.url
            value: "http://localhost:{{ httpport }}"
          - path: idenaproxy_config.logs.output
            value: "file"
          - path: idenaproxy_config.apiKeys
            value: "{{ api_keys }}"
      register: idenaproxy_config
      when: idenaproxy_status.stat.exists == false

    - name: Writing > config.json
      ansible.builtin.copy:
        content: "{{ idenaproxy_config | to_nice_json }}"
        dest: "/home/{{ username }}/idena-node-proxy/config.json"
      become: yes
      become_user: "{{ username }}"
      when: idenaproxy_status.stat.exists == false

    - name: Running Idena Proxy
      ansible.builtin.shell: |
        npm install
        npm start
        pm2 restart idena-node-proxy
      args:
        executable: /bin/bash
        chdir: /home/{{ username }}/idena-node-proxy
      become: yes
      become_user: "{{ username }}"
      when: idenaproxy_status.stat.exists == false

    - name: Idena Proxy startup for root
      ansible.builtin.shell: pm2 startup
      args:
        executable: /bin/bash
        chdir: /home/{{ username }}/idena-node-proxy
      become: yes
      become_user: "{{ username }}"
      when: idenaproxy_status.stat.exists == false
      register: idena_pm2_startup
      ignore_errors: true

    - name: Set idena_pm2_startup
      ansible.builtin.set_fact:
        idena_pm2_startup: "{{ idena_pm2_startup.stdout_lines[2] }}"

    - name: Idena Proxy as service
      ansible.builtin.shell: "{{ idena_pm2_startup }}"
      args:
        executable: /bin/bash
      become: yes
      when: idenaproxy_status.stat.exists == false

    - name: Idena Proxy start on boot
      ansible.builtin.shell: pm2 save
      args:
        executable: /bin/bash
        chdir: /home/{{ username }}/idena-node-proxy
      become: yes
      become_user: "{{ username }}"
      when: idenaproxy_status.stat.exists == false

- name: Deploying haproxy
  hosts: main
  become: true
  tags: haproxy_inst
  tasks:
    - name: Adding haproxy PPA
      ansible.builtin.apt:
        pkg: software-properties-common
        install_recommends: false
        state: present

    - name: Adding haproxy PPA
      ansible.builtin.apt_repository:
        repo: "ppa:vbernat/haproxy-2.4"
        validate_certs: false
        state: present

    - name: Installing haproxy
      ansible.builtin.apt:
        name: haproxy=2.4.*
        state: present

    - name: Create SSl cert folder
      ansible.builtin.file:
        path: /etc/ssl/{{ droplet_domain }}
        state: directory
        mode: "0755"
        recurse: true

    - name: Copying droplet domain cert
      ansible.builtin.copy:
        content: "{{ lookup('file', './node/domain_pem') }}"
        dest: /etc/ssl/{{ droplet_domain }}/{{ droplet_domain }}.pem
        owner: root
        group: root
        mode: 0644

    - name: Preparing haproxy.cfg
      ansible.builtin.blockinfile:
        path: /etc/haproxy/haproxy.cfg
        block: "{{ lookup('template', './node/haproxy.j2') }}"

    - name: Idena Proxy start on boot
      ansible.builtin.command: systemctl enable haproxy
      become: yes

    - name: Display Idena post install msg
      debug: msg={{ post_install_msg.split('\n') }}
